{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"text-white p-4 bg-weather-secondary w-full text-center\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_cache[0] || (_cache[0] = _createElementVNode(\"div\", {\n    class: \"flex\"\n  }, null, -1 /* HOISTED */)), _createCommentVNode(\" banner \"), $setup.route.query.preview ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, \" You are currently previewing this city, click the \\\"+\\\" icon to start tracking this city. \")) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Weather Overview \")], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["key","class","_createElementBlock","_Fragment","_createElementVNode","_createCommentVNode","$setup","route","query","preview","_hoisted_1"],"sources":["C:\\Users\\Nitro\\Desktop\\MEVN-STACK\\Vue\\weatherapp\\src\\components\\AsyncCityView.vue"],"sourcesContent":["<template>\r\n    <div class=\"flex\"></div>\r\n<!-- banner -->\r\n  <div\r\n    v-if=\"route.query.preview\"\r\n    class=\"text-white p-4 bg-weather-secondary w-full text-center\"\r\n  >\r\n    You are currently previewing this city, click the \"+\" icon to start tracking this city.\r\n  </div>\r\n<!-- Weather Overview -->\r\n\r\n</template>\r\n\r\n<script setup>\r\nimport axios from \"axios\";\r\nimport { useRoute } from \"vue-router\";\r\n\r\nconst route = useRoute();\r\nconst getWeatherData = async () => {\r\n  try {\r\n    const weatherData = await axios.get(\r\n      `https://api.openweathermap.org/data/3.0/onecall?lat=${route.query.lat}&lon=${route.query.lng}&exclude={part}&appid=ab9ffba82ec7ed4b627b345c57428271`\r\n    );\r\n    // call current data & time\r\n    const localOffset = new Date().getTimezoneOffset() * 60000;\r\n    const utc = weatherData.data.current.dt * 1000 + localOffset;\r\n    weatherData.data.currentTime =\r\n      utc + 1000 * weatherData.data.timezone_offset;\r\n\r\n    // call hourly weather offset\r\n    weatherData.data.hourly.forEach((hour) => {\r\n      const utc = hour.dy * 1000 + localOffset;\r\n      hour.currentTime = utc + 100 * weatherData.data.timezone_offset;\r\n    });\r\n    return weatherData;\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\nconst weatherData = await getWeatherData();\r\nconsole.log(weatherData);\r\n</script>"],"mappings":";;EAAAA,GAAA;EAKIC,KAAK,EAAC;;;uBALVC,mBAAA,CAAAC,SAAA,S,0BACIC,mBAAA,CAAwB;IAAnBH,KAAK,EAAC;EAAM,6BACrBI,mBAAA,YAAe,EAELC,MAAA,CAAAC,KAAK,CAACC,KAAK,CAACC,OAAO,I,cAD3BP,mBAAA,CAKM,OALNQ,UAKM,EAFL,6FAED,KARFL,mBAAA,gBASAA,mBAAA,sBAAyB,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}