{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport axios from \"axios\";\nimport { useRoute } from \"vue-router\";\nconst route = useRoute();\nconst getWeatherData = async () => {\n  try {\n    const weatherData = await axios.get(`https://api.openweathermap.org/data/3.0/onecall?lat=${route.query.lat}&lon=${route.query.lng}&exclude={part}&appid=f07f7c0d402dcf74f43168996815e065&units=imperial`);\n    // call current data & time\n    const localOffset = new Date().getTimezoneOffset() * 60000;\n    const utc = weatherData.data.current.dt * 1000 + localOffset;\n    weatherData.data.currentTime = utc + 1000 * weatherData.data.timezone_offset;\n\n    // call hourly weather offset\n    weatherData.data.hourly.forEach(hour => {\n      const utc = hour.dy * 1000 + localOffset;\n      hour.currentTime = utc + 100 * weatherData.data.timezone_offset;\n    });\n    return weatherData;\n  } catch (err) {\n    console.log(err);\n  }\n};\nconst weatherData = await getWeatherData();\nconsole.log(weatherData);","map":{"version":3,"names":["axios","useRoute","route","getWeatherData","weatherData","get","query","lat","lng","localOffset","Date","getTimezoneOffset","utc","data","current","dt","currentTime","timezone_offset","hourly","forEach","hour","dy","err","console","log"],"sources":["C:\\Users\\Nitro\\Desktop\\MEVN-STACK\\Vue\\weatherapp\\src\\components\\AsyncCityView.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        \r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import axios from \"axios\";\r\n    import { useRoute } from \"vue-router\"\r\n\r\n    const route = useRoute();\r\n    const getWeatherData = async () =>{\r\n        try{\r\n            const weatherData = await axios.get(`https://api.openweathermap.org/data/3.0/onecall?lat=${route.query.lat}&lon=${route.query.lng}&exclude={part}&appid=f07f7c0d402dcf74f43168996815e065&units=imperial`);\r\n            // call current data & time\r\n            const localOffset = new Date().getTimezoneOffset() * 60000;\r\n            const utc = weatherData.data.current.dt* 1000 + localOffset;\r\n            weatherData.data.currentTime = utc + 1000 * weatherData.data.timezone_offset;\r\n\r\n            // call hourly weather offset\r\n            weatherData.data.hourly.forEach((hour) => {\r\n                const utc = hour.dy * 1000 + localOffset;\r\n                hour.currentTime = utc + 100 * weatherData.data.timezone_offset;\r\n            });\r\n            return weatherData;\r\n        }catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n    const weatherData = await getWeatherData();\r\n    console.log(weatherData)\r\n</script>"],"mappings":";;AAOI,OAAOA,KAAI,MAAO,OAAO;AACzB,SAASC,QAAO,QAAS,YAAW;AAEpC,MAAMC,KAAI,GAAID,QAAQ,CAAC,CAAC;AACxB,MAAME,cAAa,GAAI,MAAAA,CAAA,KAAW;EAC9B,IAAG;IACC,MAAMC,WAAU,GAAI,MAAMJ,KAAK,CAACK,GAAG,CAAC,uDAAuDH,KAAK,CAACI,KAAK,CAACC,GAAG,QAAQL,KAAK,CAACI,KAAK,CAACE,GAAG,uEAAuE,CAAC;IACzM;IACA,MAAMC,WAAU,GAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,iBAAiB,CAAC,IAAI,KAAK;IAC1D,MAAMC,GAAE,GAAIR,WAAW,CAACS,IAAI,CAACC,OAAO,CAACC,EAAE,GAAE,IAAG,GAAIN,WAAW;IAC3DL,WAAW,CAACS,IAAI,CAACG,WAAU,GAAIJ,GAAE,GAAI,IAAG,GAAIR,WAAW,CAACS,IAAI,CAACI,eAAe;;IAE5E;IACAb,WAAW,CAACS,IAAI,CAACK,MAAM,CAACC,OAAO,CAAEC,IAAI,IAAK;MACtC,MAAMR,GAAE,GAAIQ,IAAI,CAACC,EAAC,GAAI,IAAG,GAAIZ,WAAW;MACxCW,IAAI,CAACJ,WAAU,GAAIJ,GAAE,GAAI,GAAE,GAAIR,WAAW,CAACS,IAAI,CAACI,eAAe;IACnE,CAAC,CAAC;IACF,OAAOb,WAAW;EACtB,CAAC,QAAMkB,GAAG,EAAC;IACPC,OAAO,CAACC,GAAG,CAACF,GAAG;EACnB;AACJ;AACA,MAAMlB,WAAU,GAAI,MAAMD,cAAc,CAAC,CAAC;AAC1CoB,OAAO,CAACC,GAAG,CAACpB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}