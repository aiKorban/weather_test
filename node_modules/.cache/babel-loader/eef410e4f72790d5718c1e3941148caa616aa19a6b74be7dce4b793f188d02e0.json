{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport { ref, onMounted } from \"vue\";\nimport axios from \"axios\";\nimport { useRoute } from \"vue-router\";\nexport default {\n  __name: 'AsyncCityView',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const route = useRoute();\n    const weatherData = ref(null);\n    const getWeatherData = async () => {\n      try {\n        const response = await axios.get(`https://api.openweathermap.org/data/3.0/onecall?lat=${route.query.lat}&lon=${route.query.lng}&exclude=minutely&appid=f07f7c0d402dcf74f43168996815e065&units=imperial`);\n        const localOffset = new Date().getTimezoneOffset() * 60000;\n        const utc = response.data.current.dt * 1000 + localOffset;\n        response.data.currentTime = utc + 1000 * response.data.timezone_offset;\n\n        // Process hourly weather data\n        response.data.hourly.forEach(hour => {\n          const utc = hour.dt * 1000 + localOffset; // Fixed `dy` to `dt`\n          hour.currentTime = utc + 1000 * response.data.timezone_offset;\n        });\n        weatherData.value = response.data; // Save data in reactive variable\n      } catch (err) {\n        console.error(\"Error fetching weather data:\", err);\n      }\n    };\n\n    // Fetch weather data on component mount\n    onMounted(() => {\n      getWeatherData();\n    });\n    const __returned__ = {\n      route,\n      weatherData,\n      getWeatherData,\n      ref,\n      onMounted,\n      get axios() {\n        return axios;\n      },\n      get useRoute() {\n        return useRoute;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","axios","useRoute","route","weatherData","getWeatherData","response","get","query","lat","lng","localOffset","Date","getTimezoneOffset","utc","data","current","dt","currentTime","timezone_offset","hourly","forEach","hour","value","err","console","error"],"sources":["C:/Users/Nitro/Desktop/MEVN-STACK/Vue/weatherapp/src/components/AsyncCityView.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>Weather Data</h1>\r\n    <pre>{{ weatherData }}</pre>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted } from \"vue\";\r\nimport axios from \"axios\";\r\nimport { useRoute } from \"vue-router\";\r\n\r\nconst route = useRoute();\r\nconst weatherData = ref(null);\r\n\r\nconst getWeatherData = async () => {\r\n  try {\r\n    const response = await axios.get(\r\n      `https://api.openweathermap.org/data/3.0/onecall?lat=${route.query.lat}&lon=${route.query.lng}&exclude=minutely&appid=f07f7c0d402dcf74f43168996815e065&units=imperial`\r\n    );\r\n    const localOffset = new Date().getTimezoneOffset() * 60000;\r\n    const utc = response.data.current.dt * 1000 + localOffset;\r\n    response.data.currentTime = utc + 1000 * response.data.timezone_offset;\r\n\r\n    // Process hourly weather data\r\n    response.data.hourly.forEach((hour) => {\r\n      const utc = hour.dt * 1000 + localOffset; // Fixed `dy` to `dt`\r\n      hour.currentTime = utc + 1000 * response.data.timezone_offset;\r\n    });\r\n\r\n    weatherData.value = response.data; // Save data in reactive variable\r\n  } catch (err) {\r\n    console.error(\"Error fetching weather data:\", err);\r\n  }\r\n};\r\n\r\n// Fetch weather data on component mount\r\nonMounted(() => {\r\n  getWeatherData();\r\n});\r\n</script>\r\n"],"mappings":";;AAQA,SAASA,GAAG,EAAEC,SAAS,QAAQ,KAAK;AACpC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,YAAY;;;;;;;IAErC,MAAMC,KAAK,GAAGD,QAAQ,CAAC,CAAC;IACxB,MAAME,WAAW,GAAGL,GAAG,CAAC,IAAI,CAAC;IAE7B,MAAMM,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAC9B,uDAAuDJ,KAAK,CAACK,KAAK,CAACC,GAAG,QAAQN,KAAK,CAACK,KAAK,CAACE,GAAG,yEAC/F,CAAC;QACD,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC,GAAG,KAAK;QAC1D,MAAMC,GAAG,GAAGR,QAAQ,CAACS,IAAI,CAACC,OAAO,CAACC,EAAE,GAAG,IAAI,GAAGN,WAAW;QACzDL,QAAQ,CAACS,IAAI,CAACG,WAAW,GAAGJ,GAAG,GAAG,IAAI,GAAGR,QAAQ,CAACS,IAAI,CAACI,eAAe;;QAEtE;QACAb,QAAQ,CAACS,IAAI,CAACK,MAAM,CAACC,OAAO,CAAEC,IAAI,IAAK;UACrC,MAAMR,GAAG,GAAGQ,IAAI,CAACL,EAAE,GAAG,IAAI,GAAGN,WAAW,CAAC,CAAC;UAC1CW,IAAI,CAACJ,WAAW,GAAGJ,GAAG,GAAG,IAAI,GAAGR,QAAQ,CAACS,IAAI,CAACI,eAAe;QAC/D,CAAC,CAAC;QAEFf,WAAW,CAACmB,KAAK,GAAGjB,QAAQ,CAACS,IAAI,CAAC,CAAC;MACrC,CAAC,CAAC,OAAOS,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEF,GAAG,CAAC;MACpD;IACF,CAAC;;IAED;IACAxB,SAAS,CAAC,MAAM;MACdK,cAAc,CAAC,CAAC;IAClB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}